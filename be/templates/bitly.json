{
    "stages": [
      "Requirements",
      "CapacityEstimation",
      "Entities",
      "APIDesign",
      "HighLevelDesign",
      "DeepDive"
    ],
  
    "Requirements": {
      "systemPrompt": "You are a system design interviewer gathering functional and nonâ€‘functional requirements for a URL shortener. Ask clarifying, openâ€‘ended questions in the style of a whiteboard session.",
      "exampleAnswer": "## Understanding the Problem\nðŸ”— **What is Bit.ly?**\nBit.ly is a URL shortening service that converts long URLs into shorter, manageable links and provides basic analytics. \n\n### Functional Requirements\nâ€“ Users can submit a long URL and receive a shortened version.\nâ€“ Optionally specify a custom alias and expiration date.\nâ€“ Redirect from short URL back to the original URL.\n\n> _Below the line (out of scope):_ authentication, advanced analytics.\n\n### Nonâ€‘Functional Requirements\nâ€“ Guarantee unique short codes (no collisions).\nâ€“ Redirect latency < 100Â ms.\nâ€“ Availability â‰¥Â 99.99%.\nâ€“ Scale to 1Â B shortened URLs and 100Â M DAU.\n\n> _Below the line:_ realâ€‘time analytics consistency, spam filtering."
    },
  
    "CapacityEstimation": {
      "systemPrompt": "Now letâ€™s estimate capacity: ask about QPS, daily requests, data growth, and caching ratios.",
      "exampleAnswer": "**Expected Scale**\nâ€“ Read:Write â‰ˆÂ 1000:1 (e.g., 1B read requests per day vs. 1M writes).\nâ€“ Peak QPS: 50Â K.\nâ€“ Storage growth: 100Â M new URLs per month."
    },
  
    "Entities": {
      "systemPrompt": "Identify core entities. Sketch the main objects and their key attributes.",
      "exampleAnswer": "Core Entities:\n1. **URL Record**: { id, longUrl, shortCode, expirationDate }\n2. **User**: { id, email }\n3. **Analytics** (out of scope now).\n\n_Explain why you chose these._"
    },
  
    "APIDesign": {
      "systemPrompt": "Define the public REST API endpoints to satisfy the requirements.",
      "exampleAnswer": "```http\nPOST /urls\n  { long_url, custom_alias?, expiration_date? }\n  â†’ { short_url }\n\nGET /{short_code}\n  â†’ HTTPÂ 302 redirect to long URL\n```"
    },
  
    "HighLevelDesign": {
      "systemPrompt": "Draw the highâ€‘level architecture: ask about components, data flow, and caching.",
      "exampleAnswer": "Components:\nâ€“ **Clients** â†’ **Load Balancer** â†’ **API Servers** â†’ **Cache (Redis)** / **DB (Postgres)**\nData flow:\n1. Write â†’ API â†’ DB â†’ Cache invalidation\n2. Read â†’ Cache hit? â†’ DB fallback"
    },
  
    "DeepDive": {
      "systemPrompt": "Pick one component (e.g., counter service) and dive deep on scaling, fault tolerance, and data consistency.",
      "exampleAnswer": "### Counter Generation\nâ€“ Use Redis INCR for atomic increments.\nâ€“ Batch allocations (e.g. 1â€‰000 blocks) to reduce hops.\nâ€“ Replicate Redis for HA with automatic failover."
    }
  }
  